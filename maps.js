var timerVar;
var timerDisp;
var totalSeconds = 0;
var canvas;             //canvas and context are declared here so that when they are assigned values later on they will have scope within 
var context;
var resumeBool=true;
var wgbBool=true;
var timeInterval;
var timeBool=false;
var globalImgInd=0;
var totalSpaces;
var totalTurns;
var timerStartBool=false;

function dispTime(){
            totalSeconds+=1;
            var minutes=Math.floor(totalSeconds/60);
            var seconds=(totalSeconds%60);
            if (minutes<10){
                minutes='0'+minutes;
            }
            if(seconds<10){
                seconds="0"+seconds;
            }
            timerDisp.innerHTML=minutes+":"+seconds;   
        }

var imgArray=  [{src:"messages/intro_0.jpg",l:0,r:1,ret:0,end:0},
                {src:"messages/intro_1.jpg",l:1,r:1,ret:0,end:0},
                {src:"messages/intro_2.jpg",l:1,r:1,ret:0,end:0},
                {src:"messages/intro_3.jpg",l:0,r:0,ret:1,end:0},
                {src:"messages/maze_0.jpg",l:0,r:0,ret:1,end:0},
                {src:"messages/road_0.jpg",l:0,r:0,ret:1,end:0},
                {src:"messages/WGB_0.jpg",l:0,r:0,ret:1,end:0},
                {src:"messages/end.jpg",l:0,r:0,ret:0,end:1},
                {src:"messages/road_hint.jpg",l:0,r:0,ret:1,end:0}

                ];

function imgDisp(imgSrc,context,canvas,timeBool){
    if(timeBool){
        clearInterval(timeInterval);
    }
    resumeBool=false
    var img = new Image();
    img.src = imgSrc;
    img.onload = function(){        
    context.drawImage(img,125,75);                
    };
}


function clickCoords(buttons, x, y) {
    console.log("in coords")
    console.log("buttons arr is: ",buttons)
    var buttonClicked = false;
    for (var iClick=0;iClick<buttons.length; iClick++) {
        var left = buttons[iClick].x 
        var right = buttons[iClick].x+buttons[iClick].w;
        var top = buttons[iClick].y 
        var bottom = buttons[iClick].y+buttons[iClick].h;
        if (right >= x && left <= x && bottom >= y && top <= y) {
            buttonClicked = buttons[iClick];
        }
    }
    return buttonClicked;
}


    // fill buttons array with appropriate objects
    
               



    






var p = {           
        y:16.5,
        x:12.5,
        dir:Math.PI/2,
        elevation : 0
    };
    p.pos=[p.y,p.x];


var gateRoom=[

    {
        elevation:0,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0],//6
        [0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0],//7
        [0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0],//8
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//9
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//10
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//11
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//12
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//13
        [0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0],//14
        [0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0],//15
        [0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//16
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //17
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7
      // 0                   1                   2
                                 //^//
        warpArr:[[3,15]],
        warp: function(pos,pElev){
            warpArr=gateRoom[0].warpArr;
            w=warpCheck(pos)        
            if(w===0){
                p.y=22+p.y-Math.floor(p.y)
                p.x=10+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=towerRoom;
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                timeBool=true
                if (timerStartBool===false){
                    timeInterval=setInterval(function(){dispTime()}, 1000);
                    timerStartBool=true;
                }
            }
            return
        }
    },

    {
        elevation:1,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0],//6
        [0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0],//7
        [0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0],//8
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//9
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//10
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//11
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//12
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//13
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//15
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//15
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//14
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//15
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//16
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //17
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7
      // 0                   1                   2
                                 //^//
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=gateRoom[0].warpArr;
            w=warpCheck(pos)        
            if(w===0){
                p.y=10+p.y-Math.floor(p.y)
                p.x=10+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=towerRoom;
            }
            return
        }
    },

    {
        elevation:2,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0],//6
        [0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0],//7
        [0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0],//8
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//9
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//10
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//11
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//12
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//13
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//14
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//16
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //17
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7
      // 0                   1                   2
                                 //^//
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=gateRoom[0].warpArr;
            w=warpCheck(pos)        
            if(w===0){
                p.y=10+p.y-Math.floor(p.y)
                p.x=10+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=towerRoom;
            }
            return
        }
    },

    {
        elevation:3,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0],//6
        [0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0],//7
        [0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0],//8
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//9
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//10
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//11
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//12
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//13
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//14
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//16
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //17
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7
      // 0                   1                   2
                                 //^//
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=gateRoom[0].warpArr;
            w=warpCheck(pos)        
            if(w===0){
                p.y=10+p.y-Math.floor(p.y)
                p.x=10+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=towerRoom;
            }
            return
        }
    },

    {
        elevation:4,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0],//6
        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0],//7
        [0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0],//8
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//9
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//10
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//11
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//12
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//13
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//14
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//16
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //17
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7
      // 0                   1                   2
                                 //^//
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=gateRoom[0].warpArr;
            w=warpCheck(pos)        
            if(w===0){
                p.y=10+p.y-Math.floor(p.y)
                p.x=10+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=towerRoom;
            }
            return
        }
    },

    {
        elevation:5,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0],//6
        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0],//7
        [0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0],//8
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//9
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//10
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//11
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//12
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//13
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//14
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],//15
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//16
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //17
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7
      // 0                   1                   2
                                 //^//
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=gateRoom[0].warpArr;
            w=warpCheck(pos)        
            if(w===0){
                p.y=10+p.y-Math.floor(p.y)
                p.x=10+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=towerRoom;
            }
            return
        }
    }


    ];


var towerRoom=[

    {
        elevation:0,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0],//6
        [0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0],//7
        [0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0],//8
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//9
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//A
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//B
        [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//C //
        [0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0],//D <
        [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//E //
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//F
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//G
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//H
        [0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0],//I
        [0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0],//J
        [0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0],//K
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],//L
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],//M
        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//N
        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//O
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//P
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //Q
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
      // 0                   1                   2
                                 //^//
        warpArr:[[22,9]],
        warp: function(pos,pElev){
            warpArr=towerRoom[0].warpArr;
            w=warpCheck(pos)        
            if(w===0){
                p.y=3+p.y-Math.floor(p.y)
                p.x=14+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=gateRoom;
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
            }
            return
        }
    },



    {
        elevation:1,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],//6
        [0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0],//7
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],//8
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//9
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//A
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//B
        [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//C //
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],//D <
        [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0],//E //
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0],//F
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0],//G
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0],//H
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0],//I
        [0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0],//J
        [0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0],//K
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//L
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//M
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//N
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//O
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//P
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //Q
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
      // 0                   1                   2
                                 //^//
        warpArr:[[3,19]],
        warp: function(pos,pElev){
            warpArr=towerRoom[1].warpArr;
            w=warpCheck(pos)  
            if(w===0){
                p.y=23+p.y-Math.floor(p.y)
                p.x=6+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=mazeRoom;
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                globalImgInd=4;
                imgDisp(imgArray[4].src,context,canvas,timeBool)
            }
            return
        }
    },

    {
        elevation:2,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//6
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],//7
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//8
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],//9
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//01
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],//1
        [0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//2 //
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],//3 <
        [0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//4 //
        [0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],//5
        [0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//6
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],//7
        [0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//8
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],//9
        [0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//02
        [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0],//1
        [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0],//2
        [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],//3
        [0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //6
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
      // 0                   1                   2
                                 //^//
    
        warpArr:[[2,23]],
        warp: function(pos,pElev){
            warpArr=towerRoom[2].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=26+p.y-Math.floor(p.y)
                p.x=5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=mazeRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    },                       
    {
        elevation:3,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,1,6,6,6,1,1,6,6,6,6,6,6,6,6,1,0,0,0,0,0,0],//6
        [0,0,0,0,0,0,1,6,1,6,1,1,6,6,6,6,1,1,1,6,1,0,0,0,0,0,0],//7
        [0,0,0,0,0,0,1,6,1,1,1,1,1,6,1,1,1,1,6,6,1,0,0,0,0,0,0],//8
        [0,0,0,0,0,0,6,6,6,1,1,6,1,1,1,1,6,6,6,1,1,0,0,0,0,0,0],//9
        [0,0,0,0,0,0,6,6,6,1,1,6,1,1,6,6,6,6,1,1,1,0,0,0,0,0,0],//A 10
        [0,0,0,0,0,0,0,6,6,1,6,6,6,6,6,6,1,1,1,1,6,0,0,0,0,0,0],//B
        [0,0,0,0,0,0,6,1,6,6,6,6,6,1,1,1,1,1,6,6,6,0,0,0,0,0,0],//C //
        [0,0,0,0,0,0,6,1,1,1,1,1,1,1,6,6,6,6,6,6,1,0,0,0,0,0,0],//D <
        [0,0,0,0,0,0,6,1,1,1,6,6,6,6,6,6,1,6,6,1,1,0,0,0,0,0,0],//E //
        [0,0,0,0,0,0,0,1,6,6,6,1,1,6,1,1,1,1,1,1,1,0,0,0,0,0,0],//F 15
        [0,0,0,0,0,0,6,1,6,6,1,1,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0],//G
        [0,0,0,0,0,0,6,6,6,6,1,1,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0],//H
        [0,0,0,0,0,0,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,0],//I
        [0,0,0,0,0,0,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,0],//J
        [0,0,0,0,0,0,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,0,0,0,0,0,0],//K 20
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//L
        [0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//M
        [0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//N
        [0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//O
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//P 25
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //Q
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
      // 0                   1                   2
                                 //^//
        warpArr:[[24,10]],
        warp: function(pos){
            warpArr=towerRoom[3].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=12+p.y-Math.floor(p.y)
                p.x=5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=anteRoom;
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                globalImgInd=5;
                imgDisp(imgArray[5].src,context,canvas,timeBool)
            }
            return
        }
    },
    {
        elevation:4,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//6
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//7
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//8
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//9
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//A
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//B
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//C //
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//D <
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//E //
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//F
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//G
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//H
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//I
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//J
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//K
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//L
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],//M
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0],//N
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0],//O
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//P
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //Q  
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
      // 0                   1                   2
                                 //^//
    warpArr:[[24,16],[23,13]],
        warp: function(pos){
            warpArr=towerRoom[4].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=12+p.y-Math.floor(p.y)
                p.x=5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=anteRoom;
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
            }
            if(w===1 && wgbBool){
                wgbBool=false
                globalImgInd=6;
                imgDisp(imgArray[6].src,context,canvas,timeBool)
            }
            return
        }
    },

    {
        elevation:5,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0],//5
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//6
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//7
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//8
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//9
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//A
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//B
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//C //
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//D <
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//E //
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//F
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//G
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//H
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//I
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],//J
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],//K
        [0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0],//L
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//M
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//N
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//O
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//P
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //Q
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
      // 0                   1                   2
                                 //^//
    warpArr:[],
        warp: function(pos){
            warpArr=towerRoom[5].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=10+p.y-Math.floor(p.y)
                p.x=10+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=0
                room=towerRoom;
            }
            return
        }
    }

    ];

    
    
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



var mazeRoom=[

    {
        elevation:0,
        map : [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],// 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I
    warpArr:[],
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=mazeRoom[0].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=mazeRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    },


    {
        elevation:1,
        map : [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,0,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],//20
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0],
            [0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],// 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I
    warpArr:[[24,5],[27,4]],
        warp: function(pos,pElev){
            warpArr=mazeRoom[1].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=4+p.y-Math.floor(p.y)
                p.x=18+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=towerRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            if(w===1){
                p.y=3+p.y-Math.floor(p.y)
                p.x=22+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=2
                room=towerRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    },
    {
            elevation:2,
    map : [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],// 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I
    warpArr:[],
        warp: function(pos,pElev){
            warpArr=mazeRoom[2].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=mazeRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    },
    {
            elevation:3,
    map : [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0],
            [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0],
            [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],// 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I
    warpArr:[],
        warp: function(pos,pElev){
            warpArr=mazeRoom[2].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=mazeRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    },
    {
            elevation:4,
    map : [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],// 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I
    warpArr:[],
        warp: function(pos,pElev){
            warpArr=mazeRoom[2].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=mazeRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    }
    ];



//////////////////////////////////////////////////////////////////////////////////////////////

var anteRoom=[

    {
        elevation:0,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//6
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//7
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//8
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//9
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//01
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //4
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4
      //                     1
    warpArr:[],
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=anteRoom[0].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=anteRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    
    
    
    },

    {
        elevation:1,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//00
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//01
        [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],//02
        [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],//03
        [0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],//04
        [0,0,0,0,0,0,1,0,1,1,1,1,1,0,0],//05
        [0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],//06
        [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],//07
        [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],//08
        [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],//09
        [0,0,0,1,0,1,1,1,1,1,0,0,0,0,0],//10
        [0,0,1,0,0,0,0,1,0,0,0,0,0,0,0],//11
        [0,0,1,1,1,1,1,1,0,0,0,0,0,0,0],//12
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//13
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //14
    ],// 0,0,0,0,0,0,0,0,0,0,1,1,1,1,1
      // 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4
    warpArr:[[3,8],[5,10],[12,3]],

        warp: function(pos,pElev){
            warpArr=anteRoom[1].warpArr;
            w=warpCheck(pos)
            if(w===0 || w===1){
                p.y=12+p.y-Math.floor(p.y)
                p.x=5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=anteRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            if(w===2){
                p.y=24+p.y-Math.floor(p.y)
                p.x=14+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=4
                room=towerRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    
    
    
    },
    {
        elevation:2,
        map : [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//4
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//6
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//7
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//8
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//9
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//01
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//3
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] //4
    ],// 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4
      //                     1
    warpArr:[],
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=anteRoom[3].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=anteRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    
    
    
    }
    
    ];  
    
////////////////////////////////////////////////////////////////////////////////
var spiralRoom=[

    {
        elevation:0,
        map : [
        [0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0],//1
        [0,0,1,1,1,0,0],//2
        [0,0,1,1,1,0,0],//3
        [0,0,1,1,0,0,0],//4
        [0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,0]
    ],// 0,1,2,3,4,5,6
      //                     
    warpArr:[],
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=spiralRoom[0].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=spiralRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    
    
    
    },

    {
        elevation:1,
        map : [
        [0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0],//1
        [0,0,1,0,1,0,0],//2
        [0,0,1,6,1,0,0],//3
        [0,0,1,1,1,0,0],//4
        [0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,0]
    ],// 0,1,2,3,4,5,6
      //                     
    warpArr:[],
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=spiralRoom[1].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=spiralRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    
    
    
    },
    
    {
        elevation:2,
        map : [
        [0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0],//1
        [0,0,1,1,0,0,0],//2
        [0,0,1,1,1,0,0],//3
        [0,0,1,1,1,0,0],//4
        [0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,0]
    ],// 0,1,2,3,4,5,6
      //                     
    warpArr:[],
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=spiralRoom[2].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=spiralRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    
    
    
    },

    {
        elevation:3,
        map : [
        [0,0,0,0,0,0,0],//0
        [0,0,0,0,0,0,0],//1
        [0,0,1,1,1,0,0],//2
        [0,0,1,1,1,0,0],//3
        [0,0,1,1,1,0,0],//4
        [0,0,0,0,0,0,0],//5
        [0,0,0,0,0,0,0]
    ],// 0,1,2,3,4,5,6
      //                     
    warpArr:[],
        warpArr:[],
        warp: function(pos,pElev){
            warpArr=spiralRoom[3].warpArr;
            w=warpCheck(pos)
            if(w===0){
                p.y=2.5+p.y-Math.floor(p.y)
                p.x=4.5+p.x-Math.floor(p.x)
                p.pos=[p.y,p.x]
                p.elevation=1
                room=spiralRoom
                gameSizeJ=room[0].map.length;
                gameSizeI=room[0].map[0].length;
                return;
            }
            return
        }
    
    
    
    },
    
    ];









    
////////////////////////////////////////////////////////////////////////////
    
    
    
    
    
    
    
var room=gateRoom;
var gameSizeJ=room[0].map.length;
var gameSizeI=room[0].map[0].length;
    
    
    


function warpCheck(pos){
    for(w=0;w<=warpArr.length-1;w++){
        if (Math.floor(pos[0])===warpArr[w][0] && Math.floor(pos[1])===warpArr[w][1]){
            return w;
        }
    }

}


    

    
    


mazeGen()
/*
var request;    
                    //clearInterval(playInterval);     
                    var url = 'score.py?spaces='+totalSpaces+'&turns='+totalTurns;
                    request = new XMLHttpRequest();
                    request.addEventListener('readystatechange', handle_response, false);
                    request.open('GET', url, true);
                    request.send(null);

                        
                    function handle_response() {
                        if ( request.readyState === 4 ) {
                            if ( request.status === 200 ) {
                                if ( request.responseText.trim() === 'success' ) {
                                    console.log("all good")
                                } else  {
                                    console.log("oops")
                                }
                            }
                        }
                    }

*/
function mazeGen(){
    //generates a random maze recursively from a 2d array
    var pos=[20,19];
        var maze=  [
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                    ];
    maze[pos[0]][pos[1]]=1;
    totalSpaces=0;
    totalTurns=0;
    mazeRec(pos,maze)
    console.log("spaces")
    console.log(totalSpaces)
    console.log("turns")
    console.log(totalTurns)

    var mazeR=randNum(0,1)
    var mazeExit = [0,0]
    var validExit=false
    while (validExit===false){
        if(mazeR===0){
            mazeExit[0]=2
            mazeExit[1]=randNum(3,11)
            if(maze[mazeExit[0]+1][mazeExit[1]]===1){
                maze[mazeExit[0]][mazeExit[1]]=1
                validExit=true
            }
        }
        else{
            mazeExit[1]=2
            mazeExit[0]=randNum(3,11)
            if(maze[mazeExit[0]][mazeExit[1]+1]===1){
                maze[mazeExit[0]][mazeExit[1]]=1
                validExit=true
            }
        }
    }


    console.log(maze)
    for(var jMaze=3;jMaze<maze[0].length-1;jMaze++){
        for(var iMaze=3;iMaze<maze[0].length-1;iMaze++){
            mazeRoom[0].map[jMaze][iMaze]=maze[jMaze-1][iMaze-1]
        }
    }
    
        
    function mazeRec(pos,maze){
        var oldPos=[pos[0],pos[1]];
        var aFlag=true;
        var bFlag=true;
        var cFlag=true;
        var dFlag=true;
        var turnList=[];
        var a;
        while (pos[0]>2 && pos[0]<21 && pos[1]>2 && pos[1]<21){
            if (aFlag===false && bFlag===false && cFlag===false && cFlag===false){
                break
            }
            a=randNum(0, 3);
            if (a===0){
                if (maze[pos[0]][pos[1]+1]!==1 && maze[pos[0]][pos[1]+2]!==1 && maze[pos[0]+1][pos[1]+1]!==1 && maze[pos[0]-1][pos[1]+1]!==1 && pos[1]<20){
                    pos[1]+=1;
                    maze[pos[0]][pos[1]]=1;
                    totalSpaces++;
                    aFlag=true;
                    bFlag=true;
                    cFlag=true;
                    dFlag=true;
                    turnList.push([pos[0],pos[1]]);
                }
                
                else{ 
                    aFlag=false;
                }
            }
                    
            
            if (a==1){
                if (maze[pos[0]-1][pos[1]]!==1 && maze[pos[0]-2][pos[1]]!==1 && maze[pos[0]-1][pos[1]+1]!==1 && maze[pos[0]-1][pos[1]-1]!==1 && pos[0]>2){
                    pos[0]-=1;
                    maze[pos[0]][pos[1]]=1;
                    totalSpaces++;
                    aFlag=true;
                    bFlag=true;
                    cFlag=true;
                    dFlag=true;
                    turnList.push([pos[0],pos[1]]);
                }
                else{
                    bFlag=false;
                }
            }

            if (a==2){
                if (maze[pos[0]][pos[1]-1]!==1 && maze[pos[0]][pos[1]-2]!==1 && maze[pos[0]+1][pos[1]-1]!==1 && maze[pos[0]-1][pos[1]-1]!==1 && pos[1]>2){
                    pos[1]-=1;
                    maze[pos[0]][pos[1]]=1;
                    totalSpaces++;
                    aFlag=true;
                    bFlag=true;
                    cFlag=true;
                    dFlag=true;
                    turnList.push([pos[0],pos[1]]);
                }
                else{
                    cFlag=false;
                }
            }

            if (a==3){
                if (maze[pos[0]+1][pos[1]]!==1 && maze[pos[0]+2][pos[1]]!==1 && maze[pos[0]+1][pos[1]+1]!==1 && maze[pos[0]+1][pos[1]-1]!==1 && pos[0]<20){
                    pos[0]+=1;
                    maze[pos[0]][pos[1]]=1;
                    totalSpaces++;
                    aFlag=true;
                    bFlag=true;
                    cFlag=true;
                    dFlag=true;
                    turnList.push([pos[0],pos[1]]);
                }
                else{
                    dFlag=false;
                }
            }
            }



        //print('\n'.join([''.join(['{:2}'.format(item) for item in row]) for row in maze]))
        //print(turnList)

        if (oldPos[0]!==pos[0] || oldPos[1]!==pos[1]){
                totalTurns+=1;
            }

        

        for (var turnIndex=0;turnIndex<=(turnList.length)-1;turnIndex++){
            mazeRec([turnList[turnIndex][0],turnList[turnIndex][1]],maze);
        }

    }

    function randNum(min, max) {
            return Math.round(Math.random()*(max-min))+min;
    }

}

